filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
###
### Extract most recent test result using extract_test_recent
test_data <- extract_test_recent(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid"))
testthat::expect_equal(test_data$value, c(48, NA,  NA,  NA,  18,  NA))
test_data
###
### Extract all test results using extract_test_data
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 10)
testthat::expect_equal(nrow(test_data), 13)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid", "medcodeid", "obsdate"))
testthat::expect_equal(test_data$value, c(48, 43, 36, 75, 41, NA, NA, 32, 18, NA))
test_data
rm(list=ls())
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
devtools::load_all()
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
###
### Extract most recent test result using extract_test_recent
test_data <- extract_test_recent(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
return.output = TRUE)
test_data
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid"))
testthat::expect_equal(test_data$value, c(48, NA,  NA,  NA,  18,  NA))
###
### Extract all test results using extract_test_data
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 13)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid", "medcodeid", "obsdate"))
testthat::expect_equal(test_data$value, c(48, 43, 36, 75, 41, NA, NA, 32, 18, NA))
test_data
devtools::load_all()
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
###
### Extract most recent test result using extract_test_recent
test_data <- extract_test_recent(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid"))
testthat::expect_equal(test_data$value, c(48, NA,  NA,  NA,  18,  NA))
###
### Extract all test results using extract_test_data
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
return.output = TRUE)
test_data
RSQLite::dbGetQuery(aurum_extract, "observation")
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation')
eggs <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation')
View(eggs)
subset(eggs, medcodeid == "498521000006119")
eggs <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation')
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
###
### Extract most recent test result using extract_test_recent
test_data <- extract_test_recent(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid"))
testthat::expect_equal(test_data$value, c(48, NA,  NA,  NA,  18,  NA))
### Extract all test results using extract_test_data
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 13)
testthat::expect_equal(nrow(test_data), 10)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid", "medcodeid", "obsdate"))
testthat::expect_equal(test_data$value, c(48, 43, 36, 75, 41, NA, NA, 32, 18, NA))
###
### Extract all test results using extract_test_data
test_data <- extract_test_data_var(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
time.post = Inf,
return.output = TRUE)
test_data
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value_var"))
###
### Extract all test results using extract_test_data
test_data <- extract_test_data_var(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
time.post = Inf,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value_var"))
devtools::load_all()
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value_var"))
devtools::load_all()
test_data <- extract_test_data_var(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
time.post = Inf,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value_var"))
testthat::expect_equal(sum(is.na(test_data$value_var)), 3)
### Check
devtools::check()
### Define codelist
codelist <- "187341000000114"
###
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
testthat::expect_equal(nrow(ho), 6)
testthat::expect_equal(colnames(ho), c("patid", "ho"))
testthat::expect_equal(ho$ho, c(0, 1, 0, 0, 0, 1))
ho
### Create tempdir and setwd
tempdir <- tempdir()
setwd(tempdir)
### Create directory system
create_directory_system()
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Connect
aurum_extract <- connect_database("data/sql/temp.sqlite")
### Extract data using cprd_extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define codelist
codelist <- data.frame(medcodeid = "187341000000114")
write.csv(codelist, "codelists/analysis/mylist.med.csv")
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out.save.disk = TRUE,
return = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/var_ho.rds")
ho.disk
testthat::expect_equal(ho, ho.disk)
codelist <- data.frame(medcodeid = "3092241000033113")
write.csv(codelist, "codelists/analysis/mylist.drug.csv")
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.drug",
indexdt = "fup_start",
db = "temp",
tab = "drugissue",
out.save.disk = TRUE)
ho.drug
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Define codelist
codelist <- "187341000000114"
###
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
testthat::expect_equal(nrow(ho), 6)
testthat::expect_equal(colnames(ho), c("patid", "ho"))
testthat::expect_equal(ho$ho, c(0, 1, 0, 0, 0, 1))
###
### Extract a medication history of type variable using extract_ho
ho.drug <- extract_ho(pat,
codelist.vector = 3092241000033113,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "drugissue",
return.output = TRUE)
ho.drug
testthat::expect_equal(nrow(ho.drug), 6)
testthat::expect_equal(colnames(ho.drug), c("patid", "ho"))
testthat::expect_equal(ho.drug$ho, c(1, 0, 0, 0, 0, 0))
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Create tempdir and setwd
tempdir <- tempdir()
setwd(tempdir)
### Create directory system
create_directory_system()
### Connect
aurum_extract <- connect_database("data/sql/temp.sqlite")
### Extract data using cprd_extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define codelist
codelist <- data.frame(medcodeid = "187341000000114")
write.csv(codelist, "codelists/analysis/mylist.med.csv")
codelist <- data.frame(medcodeid = "3092241000033113")
write.csv(codelist, "codelists/analysis/mylist.drug.csv")
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.drug",
indexdt = "fup_start",
db = "temp",
tab = "drugissue",
out.save.disk = TRUE,
return = TRUE)
codelist <- data.frame(prodcodeid = "3092241000033113")
write.csv(codelist, "codelists/analysis/mylist.drug.csv")
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.drug",
indexdt = "fup_start",
db = "temp",
tab = "drugissue",
out.save.disk = TRUE,
return = TRUE)
extract_ho(pat,
codelist.vector = "3092241000033113",
indexdt = "fup_start",
db.open = aurum_extract,
tab = "drugissue",
return.output = TRUE)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Check
devtools::check()
devtools::check()
devtools::check()
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Define codelist
codelist <- "187341000000114"
###
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
testthat::expect_equal(nrow(ho), 6)
testthat::expect_equal(colnames(ho), c("patid", "ho"))
testthat::expect_equal(ho$ho, c(0, 1, 0, 0, 0, 1))
ho
###
### Extract a medication history of type variable using extract_ho
ho.drug <- extract_ho(pat,
codelist.vector = "3092241000033113",
indexdt = "fup_start",
db.open = aurum_extract,
tab = "drugissue",
return.output = TRUE)
testthat::expect_equal(nrow(ho.drug), 6)
testthat::expect_equal(colnames(ho.drug), c("patid", "ho"))
testthat::expect_equal(ho.drug$ho, c(1, 0, 0, 0, 0, 0))
###
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
testthat::expect_equal(nrow(time_until), 6)
testthat::expect_equal(colnames(time_until), c("patid", "var_time", "var_indicator"))
testthat::expect_equal(time_until$var_time, c(106, 16436,  16436,  16436,  16436,  16436))
testthat::expect_equal(time_until$var_indicator, c(1, 0,  0,  0,  0,  0))
### Change code list for test data functions, as previous code list only had one observation per patient
codelist <- "498521000006119"
###
### Extract most recent test result using extract_test_recent
test_data <- extract_test_recent(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid"))
testthat::expect_equal(test_data$value, c(48, NA,  NA,  NA,  18,  NA))
###
### Extract all test results using extract_test_data
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 10)
testthat::expect_equal(colnames(test_data), c("patid", "value", "numunitid", "medcodeid", "obsdate"))
testthat::expect_equal(test_data$value, c(48, 43, 36, 75, 41, NA, NA, 32, 18, NA))
###
### Extract all test results using extract_test_data
test_data <- extract_test_data_var(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
time.prev = Inf,
time.post = Inf,
return.output = TRUE)
testthat::expect_equal(nrow(test_data), 6)
testthat::expect_equal(colnames(test_data), c("patid", "value_var"))
testthat::expect_equal(sum(is.na(test_data$value_var)), 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Create tempdir and setwd
tempdir <- tempdir()
setwd(tempdir)
### Create directory system
create_directory_system()
### Connect
aurum_extract <- connect_database("data/sql/temp.sqlite")
### Extract data using cprd_extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define codelist
codelist <- data.frame(medcodeid = "187341000000114")
write.csv(codelist, "codelists/analysis/mylist.med.csv")
codelist <- data.frame(prodcodeid = "3092241000033113")
write.csv(codelist, "codelists/analysis/mylist.drug.csv")
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out.save.disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/var_ho.rds")
ho.disk
testthat::expect_equal(ho, ho.disk)
### Extract a history of type variable and save to disc automatically, by just specifying name of database
extract_ho(pat,
codelist = "mylist.drug",
indexdt = "fup_start",
db = "temp",
tab = "drugissue",
out.save.disk = TRUE)
### Read from disk
ho.disk.drug <- readRDS("data/extraction/var_ho.rds")
testthat::expect_equal(ho.drug, ho.disk.drug)
codelist
### Extract a history of type variable and save to disk using out.subdir
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db = "temp",
tab = "observation",
out.subdir = "cohort",
out.save.disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/cohort/var_ho.rds")
ho.disk
testthat::expect_equal(ho, ho.disk)
### Extract a history of type variable and save to disk manually specifying filepath for output and db
extract_ho(pat,
codelist = "mylist.med",
indexdt = "fup_start",
db.filepath = "data/sql/temp.sqlite",
tab = "observation",
out.filepath = "data/extraction/eggs.rds",
out.save.disk = TRUE)
### Read from disk
ho.disk <- readRDS("data/extraction/eggs.rds")
testthat::expect_equal(ho, ho.disk)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
devtools::check()
devtools::check()
devtools::check_win_devel()
devtools::check_mac_release()
devtools::check(remote = TRUE, manual = TRUE)
system.file("aurum_data", package = "rAURUM")
list.files(system.file("aurum_data", package = "rAURUM"))
###
### Install
###
devtools::install()
### Document
devtools::document()
###
### Install
###
devtools::install()
### Document
devtools::document()
### Check
devtools::check()
