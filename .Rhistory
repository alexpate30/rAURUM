add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, aurum_extract, append = TRUE)
RSQLite::dbListTables(aurum_extract)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
RSQLite::dbDisconnect(aurum_extract)
aurum_extract2 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract2,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = NULL, use.set = FALSE)
cprd_extract(aurum_extract2,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = NULL, use.set = FALSE)
RSQLite::dbListTables(aurum_extract2)
RSQLite::dbGetQuery(aurum_extract2, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract2, 'SELECT * FROM drugissue', n = 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract2)
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 10)
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 10)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 10)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 50)
### Read in codelist
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
### Read in codelist
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodeid$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid, "187341000000114")
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 50)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
### Read in codelist
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodeid$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid, "187341000000114")
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
devtools::load_all()
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
extract_ho
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
t2dia_extract
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodeid$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid)
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
t2dia_extract
paste("test")
`extract_age`, `extract_bmi`, `extract_cholhdl_ratio`, `extract_diabetes`, `extract_impotence`, `extract_ethnicity`, `extract_sbp`, `extract_sbp_var`, `extract_smoking`
paste("test")
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 50)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
### Read in codelist
codelist <- "187341000000114"
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
devtools::load_all()
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
devtools::load_all()
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
devtools::load_all()
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
devtools::load_all()
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
str(time_until)
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract3,
return.output = TRUE)
### Check
devtools::check()
### Check
devtools::check()
### Check
devtools::check()
### Add packages that are required
usethis::use_package("RSQLite")
usethis::use_package("fastmatch")
usethis::use_package("stringr")
usethis::use_package("dplyr")
###
### Add license
###
usethis::use_mit_license()
### Check
devtools::check()
### Add packages that are required
usethis::use_package("devtools")
### Check
devtools::check()
### Check
devtools::check()
### Document
devtools::document()
### Document
devtools::document()
### Check
devtools::check()
### Check
devtools::check()
### Check
devtools::check()
### Check
devtools::check()
### Document
devtools::document()
### Check
devtools::check()
### Document
devtools::document()
### Check
devtools::check()
### Document
devtools::document()
### Document
devtools::document()
### Document
devtools::document()
### Check
devtools::check()
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
combine.query.boolean <- combine_query_boolean <- function(cohort = pat,
db.query = db.query,
query.type = "observation")
combine.query.boolean
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
combine.query.boolean <- combine_query_boolean(cohort = pat,
db.query = db.query,
query.type = "observation")
combine.query.boolean
#library(rAURUM)
devtools::load_all()
#library(rAURUM)
devtools::load_all()
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
db.query <- db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
db.query
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
combine.query.boolean <- combine_query_boolean(cohort = pat,
db.query = db.query,
query.type = "observation")
combine.query.boolean
### Extract a history of type variable using extract_ho
combine.query <- combine_query(cohort = pat,
db.query = db.query,
query.type = "observation")
combine.query
### Extract a history of type variable using extract_ho
combine.query <- combine_query(cohort = pat,
db.query = db.query,
query.type = "observation")
combine.query
combine.query <- combine_query(cohort = pat,
db.query = db.query,
query.type = "med")
combine.query
View(db.query)
combine.query <- combine_query(cohort = pat,
db.query = db.query,
query.type = "med",
numobs = 3)
combine.query
### Extract a history of type variable using extract_ho
combine.query <- combine_query(cohort = pat,
db.query = db.query,
query.type = "test",
numobs = 3)
combine.query
### Read in codelist
codelist <- "187341000000114"
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
### Read in codelist
codelist <- "187341000000114"
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
str(ho)
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
pat_subset <- pat |> subset(patid %in% c(1,3,4,6))
pat_subset
### Create connection to SQLite database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Add observation files
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
pat_subset
system.file("aurum_data", package = "rAURUM")
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Extract data
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), use.set = FALSE)
aurum_extract <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), use.set = FALSE)
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
pat_subset <- pat |> subset(patid %in% c(1,3,4,6))
pat_subset
### Reduce patient cohort to just variables "patid" and "set", and where patid = 1, 3, 4 and 6.
pat <- subset(pat, patid %in% c(1,3,4,6))
pat
### Create connection to SQLite database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Add observation files
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
### Add drugissue files
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
### Query first three rows of each table
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
### Read in codelist
codelist <- "187341000000114"
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
str(ho)
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract,
tab = "observation",
return.output = TRUE)
str(time_until)
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract,
return.output = TRUE)
str(test_data)
analysis.ready.pat <- Reduce(funcion(df1, df2) merge(df1, df2, by = "patid", all.x = TRUE), list(pat[,c("patid", "gender", "yob")], ho, time_until, test_data))
analysis.ready.pat <- Reduce(function(df1, df2) merge(df1, df2, by = "patid", all.x = TRUE), list(pat[,c("patid", "gender", "yob")], ho, time_until, test_data))
analysis.ready.pat
