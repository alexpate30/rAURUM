"referral" = extract_txt_ref,
"problem" = extract_txt_prob,
"consultation" = extract_txt_cons,
"hes_primary" = extract_txt_hes_primary,
"death" = extract_txt_death)[[filetype]]
### Read data into R and turn file into data.table for quicker subsetting
ext.dat <- extract_txt_func(filepath = filename, nrows = nrows, select = select)
ext.dat <- data.table::as.data.table(ext.dat)
### Reduce to only patids from cohort of interest
if (!is.null(subset.patids)){
### Reduce subset.patids input to just those from the appropriate 'set' if the filenames are compatible
### This will make subsetting ext.dat to the patients %in% subset.patids a lot quicker
if (use.set == TRUE){
### Turn into data.table
subset.patids <- data.table::as.data.table(subset.patids)
### Extract the 'set' from the filename
set.filename <- as.numeric(stringr::str_match(filename, "set\\s*(.*?)\\s*_")[,2])
### Apply subsetting
subset.patids <- subset(subset.patids, set == set.filename)
subset.patids <- subset.patids$patid
}
### Apply subsettings
#ext.dat <- ext.dat[patid %in% subset.patids]
ext.dat <- subset(ext.dat, patid %in% subset.patids)
}
}
test <- add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE)
test <- add_to_database_TEST(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE)
### Add packages that are required
usethis::use_package("data.table")
aurum_extract <- connect_database(tempfile("temp.sqlite"))
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, db = aurum_extract, overwrite = TRUE)
RSQLite::dbDisconnect(aurum_extract)
RSQLite::dbDisconnect(aurum_extract)
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
pat <- read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), sep = "\t", header = TRUE)
pat
aurum_extract <- connect_database(tempfile("temp.sqlite"))
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, db = aurum_extract, overwrite = TRUE)
### Add packages that are required
usethis::use_package("data.table", type = "depends")
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
### Read in codelist
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid, "624041000033115")
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
pat_subset
### Disconnect
RSQLite::dbDisconnect(aurum_extract3)
#library(rAURUM)
devtools::load_all()
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
#library(rAURUM)
devtools::load_all()
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
#library(rAURUM)
devtools::load_all()
pat <- read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), sep = "\t", header = TRUE)
pat
aurum_extract <- connect_database(tempfile("temp.sqlite"))
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, db = aurum_extract, overwrite = TRUE)
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, db = aurum_extract, append = TRUE)
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, db = aurum_extract, append = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, aurum_extract, overwrite = TRUE)
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, aurum_extract, append = TRUE)
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, aurum_extract, append = TRUE)
RSQLite::dbListTables(aurum_extract)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
RSQLite::dbDisconnect(aurum_extract)
aurum_extract2 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract2,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = NULL, use.set = FALSE)
cprd_extract(aurum_extract2,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = NULL, use.set = FALSE)
RSQLite::dbListTables(aurum_extract2)
RSQLite::dbGetQuery(aurum_extract2, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract2, 'SELECT * FROM drugissue', n = 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract2)
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
### Disconnect
RSQLite::dbDisconnect(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 10)
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 10)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 10)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 50)
### Read in codelist
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
### Read in codelist
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodeid$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid, "187341000000114")
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 50)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
### Read in codelist
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodeid$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid, "187341000000114")
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
devtools::load_all()
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
extract_ho
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
t2dia_extract
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodeid$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid)
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
t2dia_extract
paste("test")
`extract_age`, `extract_bmi`, `extract_cholhdl_ratio`, `extract_diabetes`, `extract_impotence`, `extract_ethnicity`, `extract_sbp`, `extract_sbp_var`, `extract_smoking`
paste("test")
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 50)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
### Read in codelist
codelist <- "187341000000114"
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2020", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
devtools::load_all()
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
ho <- extract_ho(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
devtools::load_all()
### Extract a time until variable using extract_time_until
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
devtools::load_all()
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
devtools::load_all()
time_until <- extract_time_until(pat,
codelist.vector = codelist,
indexdt = "fup_start",
censdt = "fup_end",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
str(time_until)
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
test_data <- extract_test_data(pat,
codelist.vector = codelist,
indexdt = "fup_start",
db.open = aurum_extract3,
return.output = TRUE)
### Check
devtools::check()
### Check
devtools::check()
### Check
devtools::check()
### Add packages that are required
usethis::use_package("RSQLite")
usethis::use_package("fastmatch")
usethis::use_package("stringr")
usethis::use_package("dplyr")
###
### Add license
###
usethis::use_mit_license()
### Check
devtools::check()
### Add packages that are required
usethis::use_package("devtools")
### Check
devtools::check()
### Check
devtools::check()
### Document
devtools::document()
### Document
devtools::document()
### Check
devtools::check()
### Check
devtools::check()
### Check
devtools::check()
### Check
devtools::check()
### Document
devtools::document()
### Check
devtools::check()
### Document
devtools::document()
### Check
devtools::check()
### Document
devtools::document()
### Document
devtools::document()
### Document
devtools::document()
### Check
devtools::check()
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue', n = 3)
db_query(db.open = aurum_extract,
tab ="observation",
codelist.vector = "187341000000114")
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
combine.query.boolean <- combine_query_boolean <- function(cohort = pat,
db.query = db.query,
query.type = "observation")
combine.query.boolean
### Add an index date to pat
pat$indexdt <- as.Date("01/01/2020", format = "%d/%m/%Y")
### Extract a history of type variable using extract_ho
combine.query.boolean <- combine_query_boolean(cohort = pat,
db.query = db.query,
query.type = "observation")
combine.query.boolean
#library(rAURUM)
devtools::load_all()
#library(rAURUM)
devtools::load_all()
