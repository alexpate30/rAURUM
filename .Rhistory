impotence2.1 <- subset(prod.dict2, startsWith(bnfchapter, "70405"))
### Next by creating individual code lists from each dictionary using drugsubstancename
impotence1.2 <- subset(prod.dict1, drugsubstancename %in% c("Alprostadil",
"Tadalafil",
"Sildenafil",
"Vardenafil",
"Avanafil",
"Yohimbine",
"Aviptadil"))
impotence2.2 <- subset(prod.dict2, drugsubstancename %in% c("Alprostadil",
"Tadalafil",
"Sildenafil",
"Vardenafil",
"Avanafil",
"Yohimbine",
"Aviptadil"))
### Concatenate
impotence_dict <- rbind(impotence1.1, impotence1.2, impotence2.1, impotence2.2, fill = TRUE)
### Remove duplicates
impotence_dict <- impotence_dict[!duplicated(impotence_dict$prodcodeid),]
###
### Read in code list from LSHTM
impotence_lshtm <- read.table("P:/Documents/CHARIOT/CPRD/codelists/LSHTM/erectdysdrug_aurum_feb21.txt", sep = ",", header = TRUE, colClasses = "character")
###
### Concatenate
impotence <- rbind(impotence_dict, impotence_lshtm, fill = TRUE)
### Remove duplicates
impotence <- subset(impotence, !duplicated(prodcodeid))
###
### Oral corticosteroids is taken directly from the endeavour health information manager.
###
oral_corticosteroids <- data.table::fread("P:/Documents/CHARIOT/CPRD/codelists/endeavour_raw/edh_oral_corticosteroids_emis.csv",
sep = ",", header = TRUE, fill = TRUE, colClasses = "character",
check.names = TRUE, na.strings = c(NA_character_, ""))
### Rename variables
oral_corticosteroids <- dplyr::rename(oral_corticosteroids, prodcodeid = code.id, condition = subset)
oral_corticosteroids <- oral_corticosteroids[,c("prodcodeid", "term", "condition")]
### Merge with dictionary, as the endeavour health information manager also contains lots of emis codes which are not prodcodeid's
oral_corticosteroids <- merge(oral_corticosteroids, prod.dict2[,c("prodcodeid")], by.x = "prodcodeid", by.y = "prodcodeid")
oral_corticosteroids <- dplyr::arrange(oral_corticosteroids, term)
###
### Save codelists
###
### Reduce to fewer variables
statins <- statins[,c("prodcodeid", "termfromemis", "productname", "drugsubstancename", "bnfchapter", "dmdid")]
antipsychotics <- antipsychotics[,c("prodcodeid", "termfromemis", "productname", "drugsubstancename", "bnfchapter", "dmdid")]
antihypertensives <- antihypertensives[,c("prodcodeid", "termfromemis", "productname", "drugsubstancename", "bnfchapter", "dmdid")]
impotence <- impotence[,c("prodcodeid", "termfromemis", "productname", "drugsubstancename", "bnfchapter", "dmdid")]
### Save the files
write.csv(statins, "P:/Documents/CHARIOT/CPRD/codelists/analysis/edh_statins_prodcodeid.csv", row.names = FALSE)
write.csv(antipsychotics, "P:/Documents/CHARIOT/CPRD/codelists/analysis/edh_antipsychotics_prodcodeid.csv", row.names = FALSE)
write.csv(antihypertensives, "P:/Documents/CHARIOT/CPRD/codelists/analysis/edh_antihypertensives_prodcodeid.csv", row.names = FALSE)
write.csv(impotence, "P:/Documents/CHARIOT/CPRD/codelists/analysis/edh_impotence_prodcodeid.csv", row.names = FALSE)
write.csv(oral_corticosteroids, "P:/Documents/CHARIOT/CPRD/codelists/analysis/edh_oral_corticosteroids_prodcodeid.csv", row.names = FALSE)
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Read in codelist
pat <- read.table(system.file("codelists", "t2dia", package = "rAURUM"))
### Read in codelist
t2dia_medcodes <- read.table(system.file("codelists", "t2dia", package = "rAURUM"), sep = ",", header = TRUE)
#library(rAURUM)
devtools::load_all()
### Read in codelist
t2dia_medcodes <- read.table(system.file("codelists", "t2dia", package = "rAURUM"), sep = ",", header = TRUE)
system.file("codelists", "t2dia", package = "rAURUM")
system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM")
system.file("codelists", "t2dia.csv", package = "rAURUM")
### Read in codelist
t2dia_medcodes <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE)
t2dia_medcodes
### Read in codelist
t2dia_medcodes <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodes
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
as.Date("01/01/2024")
as.Date("01/01/2024", format = "%d/%m/%Y")
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
pat
#library(rAURUM)
devtools::load_all()
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
t2dia_medcodeid
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
pat_subset
#library(rAURUM)
devtools::load_all()
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
eggs <- data.table::as.data.table(eggs)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
eggs <- data.table::as.data.table(eggs)
subset_function <- function(data){
data <- eggs[type %in% c("scrambled", "fried")]
data
}
subset_function(eggs)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
eggs <- data.table::as.data.table(eggs)
subset_function <- function(data){
data <- data[type %in% c("scrambled", "fried")]
data
}
subset_function(eggs)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
eggs <- data.table::as.data.table(eggs)
subset_function <- function(data){
if(!is.null(data)){
data <- data[type %in% c("scrambled", "fried")]
}
data
}
subset_function(eggs)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
subset_function <- function(data){
if(!is.null(data)){
data <- data.table::as.data.table(data)
data <- data[type %in% c("scrambled", "fried")]
}
data
}
subset_function(eggs)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
subset_function <- function(data){
if(!is.null(data)){
data <- data.table::as.data.table(data)
str(data)
data <- data[type %in% c("scrambled", "fried")]
}
data
}
subset_function(eggs)
#library(rAURUM)
devtools::load_all()
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
subset_function <- function(data){
if(!is.null(data)){
data <- data.table::as.data.table(data)
str(data)
atributes(data)
data <- data[type %in% c("scrambled", "fried")]
}
data
}
subset_function(eggs)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
subset_function <- function(data){
if(!is.null(data)){
data <- data.table::as.data.table(data)
str(data)
attributes(data)
data <- data[type %in% c("scrambled", "fried")]
}
data
}
subset_function(eggs)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
subset_function <- function(data){
if(!is.null(data)){
data <- data.table::as.data.table(data)
print(str(data))
print(attributes(data))
data <- data[type %in% c("scrambled", "fried")]
}
data
}
subset_function(eggs)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
#library(rAURUM)
devtools::load_all()
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
subset_function <- function(data){
if(!is.null(data)){
data <- data.table::as.data.table(data)
print(str(data))
print(attributes(data))
data <- data[type %in% c("scrambled", "fried")]
}
data
}
subset_function(eggs)
eggs <- data.frame("type" = c("scrambled", "fried", "boiled"))
apply_subset <- function(data){
subset_function(data)
}
subset_function <- function(data){
if(!is.null(data)){
data <- data.table::as.data.table(data)
print(str(data))
print(attributes(data))
data <- data[type %in% c("scrambled", "fried")]
}
data
}
apply_subset(eggs)
#library(rAURUM)
devtools::load_all()
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
t2dia_medcodeid
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
t2dia_medcodeid <- c(t2diamedcodeid, "624041000033115")
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid, "624041000033115")
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
#library(rAURUM)
devtools::load_all()
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid, "624041000033115")
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
### Read in codelist
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid, "187341000000114")
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
### Use the extract_txt function for the relevant filetype
extract_txt_func <- list("observation" = extract_txt_obs,
"drugissue" = extract_txt_drug,
"referral" = extract_txt_ref,
"problem" = extract_txt_prob,
"consultation" = extract_txt_cons,
"hes_primary" = extract_txt_hes_primary,
"death" = extract_txt_death)[["observation"]]
### Read data into R and turn file into data.table for quicker subsetting
ext.dat <- extract_txt_func(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"))
ext.dat <- data.table::as.data.table(ext.dat)
### Lets figure out WTF is going on
subset.patids = c(1,3,4,6)
### Apply subsettings
ext.dat <- ext.dat[patid %in% subset.patids]
### TO DO/TO ADD
### Want to add a manual way to define the extract_txt_function, this will allow a bit of independence from the user if file formats change.
add_to_database_TEST <- function(filename, filetype, nrows = -1, select = NULL, subset.patids = NULL, use.set = FALSE){
### Use the extract_txt function for the relevant filetype
extract_txt_func <- list("observation" = extract_txt_obs,
"drugissue" = extract_txt_drug,
"referral" = extract_txt_ref,
"problem" = extract_txt_prob,
"consultation" = extract_txt_cons,
"hes_primary" = extract_txt_hes_primary,
"death" = extract_txt_death)[[filetype]]
### Read data into R and turn file into data.table for quicker subsetting
ext.dat <- extract_txt_func(filepath = filename, nrows = nrows, select = select)
ext.dat <- data.table::as.data.table(ext.dat)
### Reduce to only patids from cohort of interest
if (!is.null(subset.patids)){
### Reduce subset.patids input to just those from the appropriate 'set' if the filenames are compatible
### This will make subsetting ext.dat to the patients %in% subset.patids a lot quicker
if (use.set == TRUE){
### Turn into data.table
subset.patids <- data.table::as.data.table(subset.patids)
### Extract the 'set' from the filename
set.filename <- as.numeric(stringr::str_match(filename, "set\\s*(.*?)\\s*_")[,2])
### Apply subsetting
subset.patids <- subset(subset.patids, set == set.filename)
subset.patids <- subset.patids$patid
}
### Apply subsettings
#ext.dat <- ext.dat[patid %in% subset.patids]
ext.dat <- subset(ext.dat, patid %in% subset.patids)
}
}
test <- add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE)
test <- add_to_database_TEST(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE)
### Add packages that are required
usethis::use_package("data.table")
aurum_extract <- connect_database(tempfile("temp.sqlite"))
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, db = aurum_extract, overwrite = TRUE)
RSQLite::dbDisconnect(aurum_extract)
RSQLite::dbDisconnect(aurum_extract)
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
pat <- read.table(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), sep = "\t", header = TRUE)
pat
aurum_extract <- connect_database(tempfile("temp.sqlite"))
add_to_database(filename = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, db = aurum_extract, overwrite = TRUE)
### Add packages that are required
usethis::use_package("data.table", type = "depends")
#library(rAURUM)
devtools::load_all()
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
### Read in codelist
t2dia_medcodeid <- read.table(system.file("codelists", "t2dia.csv", package = "rAURUM"), sep = ",", header = TRUE, colClasses = "character")
t2dia_medcodeid
t2dia_medcodeid <- t2dia_medcodes$medcodeid
t2dia_medcodeid <- c(t2dia_medcodeid, "624041000033115")
### Add an index date to pat
pat$fup_start <- as.Date("01/01/2024", format = "%d/%m/%Y")
### Extract history of type 2 diabetes using extract_ho
t2dia_extract <- extract_ho(pat,
varname = "t2_diabetes",
codelist.vector = t2dia_medcodeid,
indexdt = "fup_start",
db.open = aurum_extract3,
tab = "observation",
return.output = TRUE)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
pat_subset
### Disconnect
RSQLite::dbDisconnect(aurum_extract3)
#library(rAURUM)
devtools::load_all()
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
#library(rAURUM)
devtools::load_all()
### Reduce patient cohort to just variables "patid" and "set"
pat_subset <- pat[,c("patid", "set")]
pat_subset
### Extract cohort and create sqlite database
aurum_extract3 <- connect_database(tempfile("temp.sqlite"))
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
cprd_extract(aurum_extract3,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat_subset, use.set = TRUE)
RSQLite::dbListTables(aurum_extract3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM observation', n = 3)
RSQLite::dbGetQuery(aurum_extract3, 'SELECT * FROM drugissue', n = 3)
