View(obs1)
extract_bmi(cohort = pat,
codelist.bmi.vector = 498521000006119,
codelist.weight.vector = 401539014,
codelist.height.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
extract_bmi(cohort = pat,
codelist.bmi.vector = 498521000006119,
codelist.weight.vector = 401539014,
codelist.height.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
### Extract BMI
bmi <- extract_bmi(cohort = pat,
codelist.bmi.vector = 498521000006119,
codelist.weight.vector = 401539014,
codelist.height.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
testthat::expect_equal(nrow(bmi), 6)
testthat::expect_equal(colnames(bmi), c("patid", bmi))
extract_cholhdl_ratio(cohort = pat,
codelist.bmi.vector = 498521000006119,
codelist.weight.vector = 401539014,
codelist.height.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
extract_cholhdl_ratio(cohort = pat,
codelist.ratio.vector = 498521000006119,
codelist.chol.vector = 401539014,
codelist.hdl.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
var <- extract_bmi(cohort = pat,
codelist.bmi.vector = 498521000006119,
codelist.weight.vector = 401539014,
codelist.height.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "bmi"))
testthat::expect_equal(var$bmi, c(48, 41, NA, NA, 32, NA))
extract_cholhdl_ratio(cohort = pat,
codelist.ratio.vector = 498521000006119,
codelist.chol.vector = 401539014,
codelist.hdl.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
extract_cholhdl_ratio(cohort = pat,
codelist.ratio.vector = 401539014,
codelist.chol.vector = 498521000006119,
codelist.hdl.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
extract_cholhdl_ratio(cohort = pat,
codelist.ratio.vector = 13483031000006114,
codelist.chol.vector = 498521000006119,
codelist.hdl.vector = 401539014,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
extract_bmi(cohort = pat,
codelist.bmi.vector = 13483031000006114,
codelist.weight.vector = 498521000006119,
codelist.height.vector = 401539014,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
extract_cholhdl_ratio(cohort = pat,
codelist.ratio.vector = 498521000006119,
codelist.chol.vector = 401539014,
codelist.hdl.vector = 13483031000006114,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
getwd()
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rAURUM")
devtools::load_all()
getwd()
extract_diabetes(cohort = pat,
codelist.type1 = 498521000006119,
codelist.type2 = 401539014,
indexdt = "indexdt",
time.prev = Inf,
time.post = Inf,
db.open = aurum_extract,
return.output = TRUE)
var <- extract_diabetes(cohort = pat,
codelist.type1 = 498521000006119,
codelist.type2 = 401539014,
indexdt = "indexdt",
db.open = aurum_extract,
return.output = TRUE)
extract_diabetes(cohort = pat,
codelist.type1.vector = 498521000006119,
codelist.type2.vector = 401539014,
indexdt = "indexdt",
db.open = aurum_extract,
return.output = TRUE)
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rAURUM")
devtools::load_all()
getwd()
extract_diabetes(cohort = pat,
codelist.type1.vector = 498521000006119,
codelist.type2.vector = 401539014,
indexdt = "indexdt",
db.open = aurum_extract)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "diabetes"))
### Extract BMI
var <- extract_diabetes(cohort = pat,
codelist.type1.vector = 498521000006119,
codelist.type2.vector = 401539014,
indexdt = "indexdt",
db.open = aurum_extract)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "diabetes"))
testthat::expect_equal(var$diabetes, c("Type1", "Absent", "Absent", "Absent", "Type1", "Absent"))
var$diabetes
testthat::expect_equal(as.character(var$diabetes), c("Type1", "Absent", "Absent", "Absent", "Type1", "Absent"))
View(obs1)
extract_smoking(cohort = pat,
codelist.non.vector = 498521000006119,
codelist.ex.vector = 401539014,
codelist.light.vector = 128011000000115,
codelist.mod.vector = 380389013,
codelist.heavy.vector = 13483031000006114,
indexdt = "indexdt",
db.open = aurum_extract)
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rAURUM")
devtools::load_all()
getwd()
extract_smoking(cohort = pat,
codelist.non.vector = 498521000006119,
codelist.ex.vector = 401539014,
codelist.light.vector = 128011000000115,
codelist.mod.vector = 380389013,
codelist.heavy.vector = 13483031000006114,
indexdt = "indexdt",
db.open = aurum_extract)
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rAURUM")
devtools::load_all()
getwd()
extract_smoking(cohort = pat,
codelist.non.vector = 498521000006119,
codelist.ex.vector = 401539014,
codelist.light.vector = 128011000000115,
codelist.mod.vector = 380389013,
codelist.heavy.vector = 13483031000006114,
indexdt = "indexdt",
db.open = aurum_extract)
var <- extract_smoking(cohort = pat,
codelist.non.vector = 498521000006119,
codelist.ex.vector = 401539014,
codelist.light.vector = 128011000000115,
codelist.mod.vector = 380389013,
codelist.heavy.vector = 13483031000006114,
indexdt = "indexdt",
db.open = aurum_extract)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "smoking"))
testthat::expect_equal(as.character(var$diabetes), c("Heavy", "Non-smoker", "NA", "Moderate", "Ex-smoker", "Moderate", "Absent"))
testthat::expect_equal(as.character(var$smoking), c("Heavy", "Non-smoker", "NA", "Moderate", "Ex-smoker", "Moderate", "Absent"))
var
var$smoking
testthat::expect_equal(as.character(var$smoking), c("Heavy", "Non-smoker", "NA", "Moderate", "Ex-smoker", "Moderate"))
testthat::expect_equal(as.character(var$smoking), c("Heavy", "Non-smoker", NA, "Moderate", "Ex-smoker", "Moderate"))
View(drugissue1)
extract_impotence(cohort = pat,
codelist.med.vector = 498521000006119,
codelist.drug.vector = 3092241000033113,
indexdt = "indexdt",
db.open = aurum_extract)
setwd("C:/Users/mbrxsap3/OneDrive - The University of Manchester/GitRepos/rAURUM")
devtools::load_all()
getwd()
extract_impotence(cohort = pat,
codelist.med.vector = 498521000006119,
codelist.drug.vector = 3092241000033113,
indexdt = "indexdt",
db.open = aurum_extract)
###
### Impotence
testthat::test_that("Impotence", {
### Connect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", use.set = FALSE)
### Define pat and add index date and censoring date
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"))
pat$indexdt <- as.Date("01/01/1955", format = "%d/%m/%Y")
pat$fup_end <- as.Date("01/01/2000", format = "%d/%m/%Y")
### Extract impotence
var <- extract_impotence(cohort = pat,
codelist.med.vector = 498521000006119,
codelist.drug.vector = 3092241000033113,
indexdt = "indexdt",
db.open = aurum_extract)
testthat::expect_equal(nrow(var), 6)
testthat::expect_equal(colnames(var), c("patid", "impotence"))
testthat::expect_equal(as.character(var$impotence), c(1, 0, 0, 0, 1, 0))
})
extract_impotence(cohort = pat,
codelist.med.vector = 498521000006119,
codelist.drug.vector = 3092241000033113,
indexdt = "indexdt",
db.open = aurum_extract)
testthat::expect_equal(as.character(var$impotence), c(1, 0, 0, 0, 1, 0))
testthat::expect_equal(var$impotence, c(1, 0, 0, 0, 1, 0))
var$impotence
var <- extract_impotence(cohort = pat,
codelist.med.vector = 498521000006119,
codelist.drug.vector = 3092241000033113,
indexdt = "indexdt",
db.open = aurum_extract)
var
var$impotence
testthat::expect_equal(var$impotence, c(1, 0, 0, 0, 1, 0))
ho.drug <- extract_ho(pat,
codelist.vector = 3092241000033113,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "drugissue",
return.output = TRUE)
ho.drug
ho.drug <- extract_ho(pat,
codelist.vector = 3092241000033113,
indexdt = "fup_start",
db.open = aurum_extract,
tab = "drugissue",
return.output = TRUE)
testthat::expect_equal(nrow(ho.drug), 6)
testthat::expect_equal(colnames(ho.drug), c("patid", "ho"))
testthat::expect_equal(ho.drug$ho, c(1, 0, 0, 0, 0, 0))
### Document
devtools::document()
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Reconnect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6),
str.match = "observation", tablename = "eggs", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6),
str.match = "drugissue", tablename = "eggs", use.set = FALSE)
testthat::test_that("Extract multiple ways and expect equivalence. Testing add_to_database and cprd_extract", {
###
### Attempt 1
### Open connection
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Add observation and drugissue to database manually
## Obs
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_001.txt", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, db = aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_002.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_observation_003.txt", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), db = aurum_extract, append = TRUE)
## Drugissue
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_001.txt", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, aurum_extract, overwrite = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_002.txt", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, aurum_extract, append = TRUE)
add_to_database(filepath = system.file("aurum_data", "aurum_allpatid_set1_extract_drugissue_003.txt", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = c(1,3,4,6), use.set = FALSE, aurum_extract, append = TRUE)
### Save output
obs1 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation')
drugissue1 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue')
testthat::expect_equal(RSQLite::dbListTables(aurum_extract), c("drugissue", "observation"))
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
###
### Attempt 2
### Reconnect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6), use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6), use.set = FALSE)
### Save output
obs2 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation')
drugissue2 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue')
testthat::expect_equal(RSQLite::dbListTables(aurum_extract), c("drugissue", "observation"))
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
###
### Attempt 3
### Reconnect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Define pat
pat <- extract_txt_pat(system.file("aurum_data", "aurum_allpatid_set1_extract_patient_001.txt", package = "rAURUM"), set = TRUE)
pat <- subset(pat, patid %in% c(1,3,4,6))
### Add observation files
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", nrows = -1, select = NULL, subset.patids = pat, use.set = TRUE)
### Add drugissue files
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", nrows = -1, select = NULL, subset.patids = pat, use.set = TRUE)
### Save output
obs3 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation')
drugissue3 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue')
testthat::expect_equal(RSQLite::dbListTables(aurum_extract), c("drugissue", "observation"))
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
###
### Attempt 4 (manually define str.match and extract.txt.func)
### Reconnect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6),
extract.txt.func = extract_txt_obs, str.match = "observation", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6),
extract.txt.func = extract_txt_drug, str.match = "drugissue", use.set = FALSE)
### Save output
obs4 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM observation')
drugissue4 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM drugissue')
testthat::expect_equal(RSQLite::dbListTables(aurum_extract), c("drugissue", "observation"))
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
###
### Attempt 5 (manually define str.match and tablename)
### Reconnect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6),
str.match = "observation", tablename = "scrambled", use.set = FALSE)
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "drugissue", subset.patids = c(1,3,4,6),
str.match = "drugissue", tablename = "eggs", use.set = FALSE)
### Save output
obs5 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM scrambled')
drugissue5 <- RSQLite::dbGetQuery(aurum_extract, 'SELECT * FROM eggs')
testthat::expect_equal(RSQLite::dbListTables(aurum_extract), c("eggs", "scrambled"))
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
### Test for equivalence between extracts
testthat::expect_equal(obs1, obs2)
testthat::expect_equal(obs1, obs3)
testthat::expect_equal(obs1, obs4)
testthat::expect_equal(obs1, obs5)
testthat::expect_equal(drugissue1, drugissue2)
testthat::expect_equal(drugissue1, drugissue3)
testthat::expect_equal(drugissue1, drugissue4)
testthat::expect_equal(drugissue1, drugissue5)
###
### Attempt 6 (expect an error due to no filenames)
### Reconnect
aurum_extract <- connect_database(tempfile("temp.sqlite"))
### Extract data using cprd_Extract
testthat::expect_error(
cprd_extract(aurum_extract,
filepath = system.file("aurum_data", package = "rAURUM"),
filetype = "observation", subset.patids = c(1,3,4,6),
str.match = "eggs", use.set = FALSE))
### Disconnect
RSQLite::dbDisconnect(aurum_extract)
})
###
### Run tests
###
devtools::test()
usethis::use_vignette("extracting-and-saving-data-without-hard-filepaths")
fastmatch::fmatch(c(1,2,3,4), c(3,4))
test <- data.table::as.data.table(matrix(rep(1, 9), nrow = 3))
str(test)
test
test$V1
character(c(1,2,3))
is.numeric(c(1,"2",3))
is.numeric(c(1,"2",3))
is.character(c(1,"2",3))
devtools::load_all()
devtools::load_all()
extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
extract_cohort
devtools::load_all()
extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
devtools::load_all()
extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
devtools::load_all()
extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
testthat::expect_equal(cohort1$patid, 1:12)
cohort1 <- extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"))
testthat::expect_equal(cohort1$patid, 1:12)
testthat::expect_equal(cohort1$patid, character(1:12))
testthat::expect_equal(cohort1$patid, as.character(1:12))
testthat::expect_equal(nrow(cohort1), 12)
testthat::expect_equal(ncol(cohort1), 12)
extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"),
set = TRUE)
testthat::expect_true("set" %in% colnames(cohort2))
colnames(cohort2)
cohort2 <- extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"),
set = TRUE)
testthat::expect_true("set" %in% colnames(cohort2))
testthat::expect_equal(cohort2$patid, as.character(1:12))
testthat::expect_true("set" %in% colnames(cohort2))
testthat::expect_equal(nrow(cohort1), 13)
testthat::expect_equal(nrow(cohort1), 12)
testthat::expect_equal(ncol(cohort1), 13)
testthat::expect_equal(nrow(cohort2), 12)
testthat::expect_equal(ncol(cohort2), 13)
extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"),
patids = as.character(c(1,2,3)),
set = TRUE)
cohort3 <- extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"),
patids = as.character(c(1,2,3)),
set = TRUE)
testthat::expect_equal(cohort2$patid, as.character(1:3))
testthat::expect_equal(cohort3$patid, as.character(1:3))
testthat::expect_true("set" %in% colnames(cohort3))
testthat::expect_equal(nrow(cohort3), 3)
testthat::expect_equal(ncol(cohort2), 13)
cohort4 <- extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"),
patids = as.character(c(1,2,3)),
select = c("patid", "yob"))
testthat::expect_equal(cohort4$patid, as.character(1:3))
testthat::expect_true("set" %in% colnames(cohort4))
### Create a number of different ways
cohort4 <- extract_cohort(filepath = system.file("aurum_data", package = "rAURUM"),
patids = as.character(c(1,2,3)),
select = c("patid", "yob"))
testthat::expect_equal(cohort4$patid, as.character(1:3))
testthat::expect_equal(nrow(cohort4), 3)
testthat::expect_equal(ncol(cohort4), 2)
library(rAURUM)
```{r}
system.file("aurum_data", package = "rAURUM")
pat <- extract_patients(filepath = system.file("aurum_data", package = "rAURUM"), patids = as.character(c(1,3,4,6)))
devtools::load_all()
pat <- extract_patients(filepath = system.file("aurum_data", package = "rAURUM"), patids = as.character(c(1,3,4,6)))
str(pat)
pat <- extract_patients(filepath = system.file("aurum_data", package = "rAURUM"))
str(pat)
pat <- subset(pat, patid %in% c(1,3,4,6))
pat
as.character(1:4) %in% 2:3
list.files(filepath = system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
list.files(system.file("aurum_data", package = "rAURUM"), pattern = ".txt")
pat <- extract_patients(filepath = system.file("aurum_data", package = "rAURUM"), patids = as.character(c(1,3,4,6)))
str(pat)
pat <- extract_patients(filepath = system.file("aurum_data", package = "rAURUM"))
str(pat)
devtools::install()
devtools::document()
devtools::document()
devtools::document()
